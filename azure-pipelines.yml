trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'windows-latest'

variables:
  ACR_NAME: 'myacrname'  # Replace with your ACR name
  IMAGE_NAME: 'myapp'
  VM_IP: 'YOUR_VM_IP'  # Replace with your VM public IP
  SSH_USERNAME: 'azureuser'  # Replace with your VM username
  SSH_KEY: '$(VM_SSH_KEY)'

stages:
- stage: Provision
  displayName: 'Provision Infrastructure with Terraform'
  jobs:
  - job: TerraformApply
    displayName: 'Apply Terraform Configuration'
    steps:
    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: 'latest'

    - script: |
        terraform init
        terraform apply -auto-approve
      displayName: 'Run Terraform'
      workingDirectory: 'terraform/'

- stage: Configure
  displayName: 'Configure Server with Ansible'
  jobs:
  - job: AnsibleSetup
    displayName: 'Run Ansible Playbook'
    steps:
    - script: |
        ansible-playbook -i hosts setup-docker.yml
      displayName: 'Execute Ansible Playbook'
      workingDirectory: 'ansible/'

- stage: Build
  displayName: 'Build and Push Docker Image'
  jobs:
  - job: BuildAndPush
    displayName: 'Build and Push to ACR'
    steps:
    - task: Docker@2
      displayName: 'Login to ACR'
      inputs:
        command: 'login'
        containerRegistry: 'ACR_CONNECTION'

    - task: Docker@2
      displayName: 'Build Docker Image'
      inputs:
        command: 'build'
        Dockerfile: 'Dockerfile'
        tags: '$(IMAGE_NAME):latest'

    - task: Docker@2
      displayName: 'Push Docker Image'
      inputs:
        command: 'push'
        tags: '$(IMAGE_NAME):latest'

- stage: Deploy
  displayName: 'Deploy to Azure VM'
  jobs:
  - job: DeployVM
    displayName: 'Deploy Docker Container'
    steps:
    - task: InstallSSHKey@0
      displayName: 'Install SSH Key'
      inputs:
        knownHostsEntry: ''
        sshPublicKey: ''
        sshKeySecureFile: 'VM_SSH_KEY'

    - script: |
        ssh -o StrictHostKeyChecking=no $(SSH_USERNAME)@$(VM_IP) "
        docker pull $(ACR_NAME).azurecr.io/$(IMAGE_NAME):latest && 
        docker stop $(IMAGE_NAME) || true && 
        docker rm $(IMAGE_NAME) || true && 
        docker run -d -p 80:80 --name $(IMAGE_NAME) $(ACR_NAME).azurecr.io/$(IMAGE_NAME):latest
        "
      displayName: 'Deploy Docker Container'
